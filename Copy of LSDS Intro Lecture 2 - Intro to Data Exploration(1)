{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of LSDS Intro Lecture 2 - Intro to Data Exploration","version":"0.3.2","provenance":[{"file_id":"14Q---bc4G1sU5aEOz3w8D_1Q0l1_SM-B","timestamp":1557444306924}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"4C6FJ05R-g-U","colab_type":"text"},"source":["# Outline:\n","\n","*   Jupyter Notebook\n","*   import libraries\n","*   read dataset\n","*   clean dataset\n","*   make a simple visualization\n","\n","\n","Notes: 20 minute rule\n","Then Google\n","Then Reach out to Staff\n","\n","If you are on the asyncronous version of the class, submit assignments using the standup form, but you can do things at your own pace. Come back and watch the videos. Remember that everything can be accessed on the syllabus website: learn.lambdaschool.com\n"]},{"cell_type":"markdown","metadata":{"id":"pgovSt9L_Mhy","colab_type":"text"},"source":["## Intro to iPython \"Jupyter\" Notebooks \n","\n","### Terminology\n","Sometimes they're called \"iPython Notebooks,\" or more commonly \"Jupyter Notebooks\" or just \"Notebooks.\" These all refer to the same thing. Jupyter is supposed to be the language-agnostic version of iPython.\n","\n","[Quora: What is the difference between Jupyter and iPython Notebooks?](https://www.quora.com/What-is-the-difference-between-Jupyter-and-IPython-Notebook)\n","\n","### The Basics:\n","Runs in the browser\n","\n","Made up of: \n","*  **code** blocks, \n","*  **markdown** text (the text instructions)\n","*  **output** such as text, graphs and tables \n","\n","**Link students to a Google Colab example so that they can look at it as it's being explained**\n","\n","Notebooks help others walk through your code and see the process that you used to arrive at your findings. They make your work reproducible by others.\n","\n","- Great for sharing reproducible analysis\n","- Great for sharing educational tutorials\n","- Great for python programming in general \n","\n","Jupyter has created a gallery of famous/useful notebooks to demonstrate the power and versatility of iPython notebooks. \n","\n","[Jupyter Gallery of Interesting iPython Notebooks](https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks)\n","\n","Popular Implementations of Jupyter Notebooks:\n","\n","* Kaggle \"Kernels\"\n","* Google \"Colabs\"\n","* Microsoft Azure Notebooks\n","* Local Jupyter Notebooks (Anaconda)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wm6S5ruiXXeE","colab_type":"text"},"source":["## Intro to Google Colaboratory\n","\n","Google Colaboratory, often referred to by its shortened name, Colab(s), is a cloud-based Jupyter Notebook environment that runs on Google Drive. Colabs are like Google Docs + Jupyter Notebooks all rolled into one. Colabs can do most anything that a local Jupyter Notebook can, but they can be shared with other Google users and don't require the installation of any software/packages. The most popular Python libraries will work right out of the box. \n","\n","\n","You can learn more about the features of Google Colaboratory and view important documentation in the [Welcome Collaboratory](https://colab.research.google.com/notebooks/welcome.ipynb\n",").\n","\n","\n","Throughout the intro course, we will distribute resources and assignments via Colabs in order to keep installation frustrations to a minimum. Advanced users should pursue a local Jupyter Notebook environment like one provided through [Anaconda](https://www.anaconda.com/download/) since this is a popular industry tool. However, for the intro course, any Jupyter Notebook setup should suffice."]},{"cell_type":"markdown","metadata":{"id":"q-XuwNFOg82n","colab_type":"text"},"source":["# How to create a new Colab \n","\n","## 1) Log into [Google Drive](https://drive.google.com/). Create a Google account if you don't already have one.\n","\n","## 2) In the top left corner, click on the \"+ New\" button.\n","\n","<center>![Click the \"+ New\" Button](http://www.ryanleeallred.com/wp-content/uploads/2018/08/Screen-Shot-2018-08-21-at-2.06.27-AM.png)</center>\n","\n","## 3) In the dropdown menu click \"More\" \n","\n","<center>![Click \"More\"](http://www.ryanleeallred.com/wp-content/uploads/2018/08/Screen-Shot-2018-08-21-at-2.07.11-AM.png)</center>\n","\n","## 4)  Select Colaboratory - We will be working in Python 3 in this course.\n","\n","<center>![Select Colaboratory](http://www.ryanleeallred.com/wp-content/uploads/2018/08/Screen-Shot-2018-08-21-at-2.07.23-AM.png)</center>\n"]},{"cell_type":"markdown","metadata":{"id":"Y_DYt2XVlcOC","colab_type":"text"},"source":["# How to copy an assignment Colab \n","\n","We will issue assignments in Colaboratory as well. One of the easiest ways to get working on an assignment is to make a copy of it to your personal google drive. Here's how to do this:\n","\n","## 1) Go to \"File\" -> \"Save a Copy in Drive...\"\n","\n","<center>![Save A Copy In Drive](http://www.ryanleeallred.com/wp-content/uploads/2018/08/save-a-copy-in-drive.png)</center>"]},{"cell_type":"markdown","metadata":{"id":"zjfNivKM_N3w","colab_type":"text"},"source":["# Modules, Packages & Libraries\n","\n","By importing \"third party\" code into our projects we can \"stand on the shoulders of giants\" to use code created by others to do some pretty cool things without knowing more than basic python syntax.\n","\n","**Terminology:**\n","\n","* **Module:** A `.py` file (the file extension for python code files) with functions that we can call to do cool things.\n","\n","* **Package:** A collection of modules in a directory (folder). There's more to it than that, but we won't don't need to get into that right now.\n","\n","* **Library:** A collection of various packages usually with related/complementary functionality/purpose. \n","\n","You'll hear all three terms used interchangeably, so don't be too worried about the exact definitions right now, just know that: \n","\n","<center>**Module < Package < Library**</center>\n","\n","[Top 20 Python Libraries](https://medium.com/activewizards-machine-learning-company/top-20-python-libraries-for-data-science-in-2018-2ae7d1db8049)"]},{"cell_type":"markdown","metadata":{"id":"0OZOBbY731QG","colab_type":"text"},"source":["# Importing Modules/Packages/Libraries\n","\n","## The `import` statement\n","\n","At the core of importing third party code is the `import` statement.\n","\n","Python comes with built-in modules that we can import to help us do things. One example is the \"math\" module. \n","\n","We will import it by using the import statement followed by the name of the module or library. \n","\n","It reads like plain English! Yay Python! Notice that `import` in the code below has its own font color. This is because it is a keyword that is reserved specifically for this purpose. (you can't use it as a variable name)"]},{"cell_type":"code","metadata":{"id":"zuZkDckX_nNk","colab_type":"code","colab":{}},"source":["# Run this cell\n","import math\n","\n","# When it finishes you should not see any output below, but the number on the \n","# left-hand side should increment to show that the cell has run successfully."],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bnazjdjG_NNE","colab_type":"text"},"source":["The `math` module comes with a lot of predefined functions that we can now call to perform specific operations. For a full list of all of the functions that are available in the math module see the [documentation](https://docs.python.org/3/library/math.html). Get used to reading documentation. It is a critical skill.\n","\n","We can access functions or variables from the math module using \"dot notation.\" Here are some examples:"]},{"cell_type":"code","metadata":{"id":"1YZzHGw6-5Cz","colab_type":"code","outputId":"197f4eff-d1ea-4acf-efda-5c8599443a75","executionInfo":{"status":"ok","timestamp":1557444799002,"user_tz":420,"elapsed":921,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# Starting Value\n","long_decimal = 0.2344589030948239\n","\n","# Round up using math.ceil()\n","rounded_up = math.ceil(long_decimal)\n","print(\"long_decimal rounded up to the nearest integer:\", rounded_up)\n","\n","# Round down using math.floor()\n","rounded_down = math.floor(long_decimal)\n","print(\"long_decimal rounded down to the nearest integer:\", rounded_down)\n","\n","# Return the first number raised to the second number\n","two_to_the_third_power = math.pow(2,3) # A long variable name never hurt anyone.\n","print(\"2^3 =\", two_to_the_third_power)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["long_decimal rounded up to the nearest integer: 1\n","long_decimal rounded down to the nearest integer: 0\n","2^3 = 8.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VgO6HiRM-jzw","colab_type":"text"},"source":["Look at all of that cool stuff that we didn't have to program ourselves, but that we could do in a single line thanks to the math module!\n","\n","## `import ... from ...`  syntax\n","\n","We will import all third party code using the import keyword, however, some libraries are quite large and we might not want to import the whole thing. It is good practice to only import the functionality that you are going to need and nothing else.\n","\n","For example, if I only wanted the `.ceil()` method from the math module, I could import only that funtion by using `from ... import ...` syntax."]},{"cell_type":"code","metadata":{"id":"fE9D0cE5-i1m","colab_type":"code","outputId":"8137d0d1-9730-42b6-f59f-363c385c18d2","executionInfo":{"status":"ok","timestamp":1557444799003,"user_tz":420,"elapsed":904,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# This will delete the math module, so that we can re-import \n","# only the .ceil() function. \n","#del math\n","# If you're getting an error on the above line, make sure you have \n","# math module imported so that it is defined when we go to delete it. \n","\n","# import only the .ceil() function\n","from math import ceil, floor\n","\n","always_round_up = .000000000000001\n","\n","# Notice that I'm not using dot notation on the function call \n","# because I didn't import the math module itself. I only imported the ceil \n","# function *from* the math module. \n","rounded_value = ceil(always_round_up)\n","print(rounded_value)\n","\n","# Notice if I try to use any other math functions, I will get an error\n","# because I only imported the ceil function using \"from ... import ...\" syntax\n","rounded_number = floor(always_round_up)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xBAbpNYw6RGa","colab_type":"text"},"source":["## Aliasing Modules - the `as` keyword\n","\n","You can modify the names of modules and their functions using the `as` keyword. This is often used to shorten long module names as well as to avoid variable colisions. We will often be working with multiple libraries/modules in a project and if they use the same variable/function names then we could run into problems (variable colisions). Aliasing can help us prevent that."]},{"cell_type":"code","metadata":{"id":"IYfrz2t-6Yx5","colab_type":"code","outputId":"f06d9adc-e0ff-46af-a701-e683c89a55fd","executionInfo":{"status":"ok","timestamp":1557444799005,"user_tz":420,"elapsed":888,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import math as m\n","\n","print(m.pow(2,3))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["8.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0EeAvsjbFBmF","colab_type":"text"},"source":["You can combine aliasing and \"import ... from ...\" syntax in order to rename specific portions of modules/libraries."]},{"cell_type":"code","metadata":{"id":"7WOzgrWpFu7N","colab_type":"code","outputId":"17e64671-bf4e-49c0-c294-565f15d4c245","executionInfo":{"status":"ok","timestamp":1557444799006,"user_tz":420,"elapsed":870,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from math import ceil as c\n","\n","rounded = c(0.4444444)\n","print(rounded)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"A5sS6HSexTm3","colab_type":"text"},"source":["### [Name A More Iconic Trio... I'll Wait...](https://twitter.com/vboykis/status/1032631145035427840)\n","\n","<center>![Iconic Trio](http://www.ryanleeallred.com/wp-content/uploads/2018/08/iconic-trio.png)</center>"]},{"cell_type":"markdown","metadata":{"id":"MQGVtjj7LpeM","colab_type":"text"},"source":["# Intro to Pandas \n","\n","The Pandas library is extremely popular for data munging and data preparation. It does not implement any significant modeling functionality, but is simply for managing, cleaning, formatting, and shaping a dataset. \n","\n","The Pandas library revolves around a certain data structure called a **DataFrame**. You can think of a dataframe like a spreadsheet with rows and columns. Each column has a header and each row has an unique identifier called an index (usually a number). Each row of our dataframe (again, think spreadsheet) represents a single **record** or entry in our dataset. \n","\n","This will all make more sense if we get some data and start playing around with it. Pandas makes it really easy to import data from a CSV to work with, so that's what we'll do. \n","\n","We are going to use the famous **Titanic Dataset** for demonstration purposes. The Titanic dataset is a list of all of the passengers on the ship's manifest. it lists particular attributes about them along with whether or not they survived. The dataset is small which will help us to work with it as beginners, but it's also not perfectly clean, which will give us an opportunity to learn some basic data cleaning techniques."]},{"cell_type":"markdown","metadata":{"id":"qpNlkY77RMcQ","colab_type":"text"},"source":["## Import the Pandas library\n","\n","We are going to create an alias reference to the Pandas library as \"pd\""]},{"cell_type":"code","metadata":{"id":"QvSltKrmRL6q","colab_type":"code","colab":{}},"source":["# Alias Pandas as pd\n","import pandas as pd"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JRuOvT-KR5hX","colab_type":"text"},"source":["## Read Data from a CSV File\n","\n","It's common that small file-based datasets are saved in Comma-Separated-Value or CSV format. Excel spreadsheets can be saved in this format, so it only makes sense that they would be natural candidates to be imported into Pandas Dataframes.\n","\n","If you ever get confused about what python is doing and what pandas is doing, google and READ THE DOCUMENTATION! \n","\n","[Pandas Documentation](http://pandas.pydata.org/pandas-docs/stable/)\n","\n","We are going to use Pandas' .read_csv() function in order to read in a CSV from a web url (on github) and store it in a dataframe. Once we have the data read we can begin to manipulate it.\n","\n","It is common to label dataframes df for short, but you can name yours whatever you like. It's a variable name like anything else. "]},{"cell_type":"code","metadata":{"id":"qBjL_EPjRKla","colab_type":"code","outputId":"29a2096c-6f96-4b2d-f2a7-70571b276a0e","executionInfo":{"status":"ok","timestamp":1557444799290,"user_tz":420,"elapsed":1125,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":74}},"source":["df = pd.read_csv('https://github.com/sriramvsharma/first-python-notebook/blob/master/AI%20Researchers%20-%20India%20-%20Sheet1-5.csv', error_bad_lines=False)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["b'Skipping line 75: expected 1 fields, saw 5\\nSkipping line 124: expected 1 fields, saw 3\\nSkipping line 139: expected 1 fields, saw 11\\nSkipping line 162: expected 1 fields, saw 4\\nSkipping line 166: expected 1 fields, saw 2\\nSkipping line 168: expected 1 fields, saw 2\\nSkipping line 169: expected 1 fields, saw 2\\nSkipping line 170: expected 1 fields, saw 2\\nSkipping line 171: expected 1 fields, saw 2\\nSkipping line 172: expected 1 fields, saw 2\\nSkipping line 173: expected 1 fields, saw 2\\nSkipping line 174: expected 1 fields, saw 2\\nSkipping line 175: expected 1 fields, saw 2\\nSkipping line 179: expected 1 fields, saw 2\\nSkipping line 180: expected 1 fields, saw 2\\nSkipping line 186: expected 1 fields, saw 2\\nSkipping line 194: expected 1 fields, saw 4\\nSkipping line 200: expected 1 fields, saw 2\\nSkipping line 205: expected 1 fields, saw 2\\nSkipping line 206: expected 1 fields, saw 2\\nSkipping line 207: expected 1 fields, saw 2\\nSkipping line 208: expected 1 fields, saw 2\\nSkipping line 209: expected 1 fields, saw 2\\nSkipping line 214: expected 1 fields, saw 2\\nSkipping line 215: expected 1 fields, saw 2\\nSkipping line 216: expected 1 fields, saw 2\\nSkipping line 223: expected 1 fields, saw 2\\nSkipping line 231: expected 1 fields, saw 4\\nSkipping line 236: expected 1 fields, saw 2\\nSkipping line 239: expected 1 fields, saw 2\\nSkipping line 240: expected 1 fields, saw 2\\nSkipping line 244: expected 1 fields, saw 2\\nSkipping line 245: expected 1 fields, saw 2\\nSkipping line 267: expected 1 fields, saw 2\\nSkipping line 402: expected 1 fields, saw 11\\nSkipping line 404: expected 1 fields, saw 11\\nSkipping line 445: expected 1 fields, saw 9\\nSkipping line 456: expected 1 fields, saw 9\\nSkipping line 468: expected 1 fields, saw 9\\nSkipping line 597: expected 1 fields, saw 3\\nSkipping line 598: expected 1 fields, saw 3\\nSkipping line 604: expected 1 fields, saw 3\\nSkipping line 609: expected 1 fields, saw 3\\nSkipping line 610: expected 1 fields, saw 3\\nSkipping line 614: expected 1 fields, saw 3\\nSkipping line 615: expected 1 fields, saw 3\\nSkipping line 684: expected 1 fields, saw 2\\nSkipping line 799: expected 1 fields, saw 4\\nSkipping line 818: expected 1 fields, saw 3\\nSkipping line 833: expected 1 fields, saw 2\\nSkipping line 871: expected 1 fields, saw 2\\nSkipping line 932: expected 1 fields, saw 5\\nSkipping line 951: expected 1 fields, saw 3\\nSkipping line 1612: expected 1 fields, saw 3\\nSkipping line 1631: expected 1 fields, saw 2\\nSkipping line 2570: expected 1 fields, saw 2\\nSkipping line 2657: expected 1 fields, saw 2\\nSkipping line 2680: expected 1 fields, saw 4\\nSkipping line 2714: expected 1 fields, saw 2\\nSkipping line 2718: expected 1 fields, saw 2\\nSkipping line 2942: expected 1 fields, saw 2\\nSkipping line 3288: expected 1 fields, saw 3\\nSkipping line 3550: expected 1 fields, saw 2\\nSkipping line 3763: expected 1 fields, saw 2\\nSkipping line 4747: expected 1 fields, saw 2\\nSkipping line 5260: expected 1 fields, saw 2\\nSkipping line 5758: expected 1 fields, saw 3\\nSkipping line 5985: expected 1 fields, saw 2\\nSkipping line 5986: expected 1 fields, saw 3\\nSkipping line 5987: expected 1 fields, saw 3\\nSkipping line 5988: expected 1 fields, saw 3\\nSkipping line 5989: expected 1 fields, saw 3\\nSkipping line 5990: expected 1 fields, saw 3\\nSkipping line 5997: expected 1 fields, saw 3\\nSkipping line 5998: expected 1 fields, saw 3\\nSkipping line 5999: expected 1 fields, saw 3\\nSkipping line 6000: expected 1 fields, saw 3\\nSkipping line 6001: expected 1 fields, saw 3\\nSkipping line 6002: expected 1 fields, saw 3\\n'\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"KYzQcf_yzwkU","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KHKzU83SzuWS","colab_type":"code","outputId":"4c5daf11-1756-4e93-ddc6-4b4ffca15b97","executionInfo":{"status":"ok","timestamp":1557444807182,"user_tz":420,"elapsed":283,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":669}},"source":["# Use the .head() function to look at the first 5 rows of our new dataframe\n","df.head()\n","\n","# We can pass in an integer to the .head function to designate the number of rows \n","# of output that we would like to see\n","df.head(20)"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;!DOCTYPE html&gt;</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;html lang=\"en\"&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;head&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>&lt;meta charset=\"utf-8\"&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://githu...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://githu...</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://user-...</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>&lt;link crossorigin=\"anonymous\" media=\"all\" in...</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>&lt;link crossorigin=\"anonymous\" media=\"all\" in...</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>&lt;link crossorigin=\"anonymous\" media=\"all\" ...</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>&lt;meta name=\"viewport\" content=\"width=device-...</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>&lt;title&gt;first-python-notebook/AI Researchers ...</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>&lt;meta name=\"description\" content=\"My first...</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>&lt;link rel=\"search\" type=\"application/opens...</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>&lt;link rel=\"fluid-icon\" href=\"https://github....</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>&lt;meta property=\"fb:app_id\" content=\"14014886...</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>&lt;meta name=\"twitter:image:src\" content=\"ht...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                      <!DOCTYPE html>\n","0                                    <html lang=\"en\">\n","1                                              <head>\n","2                              <meta charset=\"utf-8\">\n","3     <link rel=\"dns-prefetch\" href=\"https://githu...\n","4     <link rel=\"dns-prefetch\" href=\"https://avata...\n","5     <link rel=\"dns-prefetch\" href=\"https://avata...\n","6     <link rel=\"dns-prefetch\" href=\"https://avata...\n","7     <link rel=\"dns-prefetch\" href=\"https://avata...\n","8     <link rel=\"dns-prefetch\" href=\"https://githu...\n","9     <link rel=\"dns-prefetch\" href=\"https://user-...\n","10    <link crossorigin=\"anonymous\" media=\"all\" in...\n","11    <link crossorigin=\"anonymous\" media=\"all\" in...\n","12      <link crossorigin=\"anonymous\" media=\"all\" ...\n","13    <meta name=\"viewport\" content=\"width=device-...\n","14    <title>first-python-notebook/AI Researchers ...\n","15      <meta name=\"description\" content=\"My first...\n","16      <link rel=\"search\" type=\"application/opens...\n","17    <link rel=\"fluid-icon\" href=\"https://github....\n","18    <meta property=\"fb:app_id\" content=\"14014886...\n","19      <meta name=\"twitter:image:src\" content=\"ht..."]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"7Y2pySfjTePq","colab_type":"text"},"source":["You can see how each row/record holds the information of a single individual aboard the ship. Columns are typically referred to as \"features\" of a dataset because they represent all of the different attributes of the records that are being represented."]},{"cell_type":"markdown","metadata":{"id":"E3T5kz2xU-Yx","colab_type":"text"},"source":["# Basic Pandas Functionality\n","\n","Now we have data! Lets demonstrate a few of the basic things that we can do with our new dataframe to help us understand what's in this dataset."]},{"cell_type":"markdown","metadata":{"id":"6_JeHNnoTovU","colab_type":"text"},"source":["## The .shape attribute\n","\n","Every dataframe has a .shape attribute that will tell us the number of rows and columns of our dataframe"]},{"cell_type":"code","metadata":{"id":"6vvfy9Z9Tr1-","colab_type":"code","outputId":"036b240e-1725-4f77-b356-8ad0739c224f","executionInfo":{"status":"ok","timestamp":1557444799536,"user_tz":420,"elapsed":1321,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# It looks like our dataframe has 891 rows and 16 columns - Always (Rows, Columns) \n","# just like in Linear Algebra matrices are designated with the row number first \n","# and the column number second. RxC. I always think of RC cars as a mnemonic device.\n","df.shape\n","# if a jupyter notebook cell gets something returned inside of it, it will just print it out. \n","# This is why we don't need a print() statement around df.shape"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5746, 1)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"SF_8hG_8VWR3","colab_type":"text"},"source":["## The .dtypes attribute\n","\n","Each column in a dataframe has a specific data type that all pieces of data in that column conform to. We can print out all of the datatypes using the .dtypes attribute. You'll notice that text columns or \"strings\" are typically represented by the \"object\" datatype."]},{"cell_type":"code","metadata":{"id":"sj1uXzeFVeQv","colab_type":"code","outputId":"2df15dfb-c6c1-49a7-d5a5-8c97c66055b3","executionInfo":{"status":"ok","timestamp":1557444799537,"user_tz":420,"elapsed":1304,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["df.dtypes"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<!DOCTYPE html>    object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"0f8sVhqhUb0u","colab_type":"text"},"source":["## The .describe() function\n","\n","The .describe() function will give us summary statistics for all of our numeric columns (features). You'll notice that the classes with the datatype \"object\" are not present in the .describe() output.\n","\n"]},{"cell_type":"code","metadata":{"id":"FmTq_qB2Ug4J","colab_type":"code","outputId":"1a466092-7de6-46d1-dbf0-7319d70c59d7","executionInfo":{"status":"ok","timestamp":1557444799538,"user_tz":420,"elapsed":1291,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["df.describe()"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;!DOCTYPE html&gt;</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5746</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>3092</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>&lt;/tr&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>272</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        <!DOCTYPE html>\n","count              5746\n","unique             3092\n","top               </tr>\n","freq                272"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"OJr11Lc-W1ep","colab_type":"text"},"source":["# Cleaning the data\n","\n","Lets look at the .head() output again and inspect the rows a little more carefully. You'll see that there are lots of \"NaN\" values. NaN stands for Not-a-Number, and is Pandas' default missing value indicator. They are commonly referred to as \"NA\" values as well. The presence of those little buggers means that those cells were empty in our CSV when we read it in. We have some missing data."]},{"cell_type":"code","metadata":{"id":"zv5GOhhyXLCu","colab_type":"code","outputId":"cdc8a57a-9321-4018-e223-65bbe37d229d","executionInfo":{"status":"ok","timestamp":1557444799539,"user_tz":420,"elapsed":1277,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["# You will see a lot of NaN values if you look at the deck column\n","df.head(10)"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;!DOCTYPE html&gt;</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;html lang=\"en\"&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;head&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>&lt;meta charset=\"utf-8\"&gt;</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://githu...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://avata...</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://githu...</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>&lt;link rel=\"dns-prefetch\" href=\"https://user-...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                     <!DOCTYPE html>\n","0                                   <html lang=\"en\">\n","1                                             <head>\n","2                             <meta charset=\"utf-8\">\n","3    <link rel=\"dns-prefetch\" href=\"https://githu...\n","4    <link rel=\"dns-prefetch\" href=\"https://avata...\n","5    <link rel=\"dns-prefetch\" href=\"https://avata...\n","6    <link rel=\"dns-prefetch\" href=\"https://avata...\n","7    <link rel=\"dns-prefetch\" href=\"https://avata...\n","8    <link rel=\"dns-prefetch\" href=\"https://githu...\n","9    <link rel=\"dns-prefetch\" href=\"https://user-..."]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"aY8aTp5gXbtt","colab_type":"text"},"source":["# Dealing with Missing Data\n","\n","## Counting NaN Values - Google It!\n","\n","So you have some missing data, but how much? Lets figure it out.\n","\n","First look at the [Pandas Documentation](http://pandas.pydata.org/pandas-docs/stable/) and see if you can find any functionality that would help us figure out how much data is missing.\n","\n","You might also try googling some pretty specific phrases like:\n","\n","[How to tell how many NaN values are in a pandas dataframe](https://www.google.com/search?q=How+to+tell+how+many+NaN+values+are+in+a+pandas+dataframe&oq=How+to+tell+how+many+NaN+values+are+in+a+pandas+dataframe&aqs=chrome..69i57.1239j0j7&sourceid=chrome&ie=UTF-8)\n","\n","or the more generic\n","\n","[How to deal with missing data pandas python](https://www.google.com/search?ei=RQJ8W9CMO8G_jwSu76eADA&q=How+to+deal+with+missing+data+pandas+python&oq=How+to+deal+with+missing+data+pandas+python&gs_l=psy-ab.3...42955.50917.0.51745.0.0.0.0.0.0.0.0..0.0....0...1c.2.64.psy-ab..0.0.0....0.xeeJ6KnlQgM)"]},{"cell_type":"markdown","metadata":{"id":"8kynTlhQal3L","colab_type":"text"},"source":["## Dataframe Operations vs Column Operations\n","\n","Up until this point we have been doing operations on the entire dataframe, but we can access specific dataframe columns in two different ways. We can use \"dot syntax\" as if the column was an attribute on a class. Or we can use square brackets with the name of the column passed in as a string. I'll demonstrate both so that you can see what I mean. We'll look at the deck column since it has a lot of NaNs."]},{"cell_type":"code","metadata":{"id":"NKvCmrcbXzCT","colab_type":"code","outputId":"31ec6554-39aa-4547-fd53-80e718d1f633","executionInfo":{"status":"error","timestamp":1557444799574,"user_tz":420,"elapsed":1297,"user":{"displayName":"Sriram Sharma","photoUrl":"https://lh4.googleusercontent.com/-AfbL7gI_6qI/AAAAAAAAAAI/AAAAAAAAALc/scHzC35QFTc/s64/photo.jpg","userId":"16330861996061951163"}},"colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["# Access the deck column using dot notation\n","df.deck"],"execution_count":27,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-71e721715113>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdeck\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5065\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5066\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5067\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5068\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5069\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'deck'"]}]},{"cell_type":"code","metadata":{"id":"RbM0MPGAX8AD","colab_type":"code","colab":{}},"source":["# Access the deck column using square brackets with the column name as a string \n","# (wrapped in single or double quotes).\n","df['deck']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LiCfjOf8YCP1","colab_type":"text"},"source":["See how the output for the above two sections is the same? \"Pythonic\" code usually gives you one clear way of doing things, but this is not one of those cases. There are two equally acceptable ways of accessing the columns of a dataframe. There are certain situations where you might prefer one over the other, but we won't go into that right now. You'll see both of these syntaxes used quite often, so get used to them! I'll switch back and forth to give you practice."]},{"cell_type":"markdown","metadata":{"id":"oBT3f3rLY2N7","colab_type":"text"},"source":["## Counting NaN values\n","\n","If you want to get an idea for how much data is missing, you've got to get a count of the NaN values somehow. Just as we have explored attributes and functions of a dataframe, dataframe columns also come with their own functions. \n"]},{"cell_type":"code","metadata":{"id":"bK_jVuPtbXN9","colab_type":"code","colab":{}},"source":["# Check for NaN values in the whole dataframe\n","df.isnull()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q7UB1J8ucBJH","colab_type":"code","colab":{}},"source":["# Sum up the number of True values by column in the entire dataframe\n","df.isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FfSA_aMXcVBG","colab_type":"text"},"source":["## Look at NaN values in a specific column\n"]},{"cell_type":"code","metadata":{"id":"Fx9v8ohacUTx","colab_type":"code","colab":{}},"source":["# Print out null values of the deck column\n","df['deck'].isnull()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"T6P7Nja4chnC","colab_type":"code","colab":{}},"source":["# Print out sum of all null values of the deck column\n","df['deck'].isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VSuGBMUwc2Dz","colab_type":"text"},"source":["# Cleaning Missing Values\n","\n","Why do we care if there are missing values? Well, some predictive models will break if there is any missing data in the dataset. So how are we going to deal with this?\n","\n","Our options are basically: \n","\n","**1) Fill in the missing data with something sensible**\n","\n","or \n","\n","**2) Get rid of the missing data** - It's not missing if it doesn't exist. :)\n","\n","If you'll recall the embarked and embark_town features (columns) only had two missing values. If we were to fill these in even with completely arbitrary values it wouldn't damage the predictive power of our data very much. What pandas functions can we use to fill in NA values?\n","\n","GOOGLE IT AGAIN!\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Ent7bikWd-9j","colab_type":"text"},"source":["## .fillna() - Data Imputation\n","\n","the [.fillna()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html) function can help us fill NA (NaN) values with different measures of center like the mean, or median of a column (if the column is numeric). Or we can use a \"forward-fill\" or \"backwards-fill\" technique to simply force missing cells to have the same value as the closest before/after cell that contains an actual value. \n","\n","At this step in the process we probably won't be able to go back in time and obtain the true data, the best that we can do is to try and fill in the missing values using a process that will hopefully be better than random.\n","\n","Lets use a forward-fill technique on the embarked and embarked_town columns to address the two missing values there."]},{"cell_type":"code","metadata":{"id":"MiEiA4aAezli","colab_type":"code","colab":{}},"source":["# Forward Fill the embark and embark_town columns\n","\n","df.head()\n","df['embarked'] = df['embarked'].fillna(method='ffill')\n","df['embark_town'] = df['embark_town'].fillna(method='ffill')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vqEDD4dmfpzr","colab_type":"text"},"source":["Lets count up the NaN values in those columns again to make sure that we've been successful."]},{"cell_type":"code","metadata":{"id":"GjsgEYj-fyt7","colab_type":"code","colab":{}},"source":["df['embarked'].isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xMUrzVZRgShS","colab_type":"code","colab":{}},"source":["df['embark_town'].isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FIqmhtaziWgA","colab_type":"text"},"source":["We can fill in the missing age values with the median age.\n","\n"]},{"cell_type":"code","metadata":{"id":"F4Z78zVdig3g","colab_type":"code","colab":{}},"source":["# Fill missing age values with the median age.\n","\n","median_age = df.age.median()\n","print(\"median age:\", median_age)\n","\n","df.age = df.age.fillna(median_age)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZnMcLl2piwKr","colab_type":"code","colab":{}},"source":["df.age.isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fRbeaJxRgRsu","colab_type":"text"},"source":["## Dropping \"bad\" data\n","\n","Sometimes there's so much missing data that it doesn't seem appropriate or cost effective to try and deal with it in a sensible way. Dropping features or rows is a respectable choice if done carefully. Since we have so many features missing in our deck column, we're just going to drop it entirely.\n","\n","[Google Search: drop column dataframe pandas](drop column dataframe pandas)\n","\n","## .drop()\n","\n","the .drop() function can help us drop certain rows or columns. However, unless specified, it will try and drop rows from the dataset. If we want to drop columns then we have to specify the parameter axis=1. This tells Pandas that we want to drop a column and not a row."]},{"cell_type":"code","metadata":{"id":"yCskgppDiK-y","colab_type":"code","colab":{}},"source":["# Drop the deck Column\n","df = df.drop('deck', axis=1)\n","df.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U8beToHciRU3","colab_type":"code","colab":{}},"source":["#Check for missing values again.\n","df.isnull().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h9rRH1CejDrG","colab_type":"text"},"source":["Our data is now clean of any missing values. Now that we've got those pesky NaNs out of the way, lets visualize our data."]},{"cell_type":"markdown","metadata":{"id":"UBT1a5ZX_eRr","colab_type":"text"},"source":["# Intro to Matplotlib\n","\n","Matplotlib is a popular library that is used to create graphs and other insightful visualizations. Today we're just going to focus on one core graph: the scatterplot.\n","\n","All matplotlib scatterplots begin with creating a plot object and passing it the x and y values that we want to plot.\n","\n","We call .show() to tell our graph to display."]},{"cell_type":"code","metadata":{"id":"k2BBYcdk-cdd","colab_type":"code","colab":{}},"source":["# Alias matplotlib's pyplot module as plt.\n","import matplotlib.pyplot as plt\n","\n","plt.scatter(df['fare'], df['age'])\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6KIqZk8flTS-","colab_type":"text"},"source":["Pretty simple. Now what if we want to add axis labels and a title?"]},{"cell_type":"code","metadata":{"id":"KXThfeLulj-v","colab_type":"code","colab":{}},"source":["plt.scatter(df['age'], df['fare'])\n","plt.xlabel('Age')\n","plt.ylabel('Fare')\n","plt.title(\"Age by Fare\")\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AvI_v0rClivf","colab_type":"text"},"source":["# Now it's your turn! \n","\n","Check out the assignment and go through the exercises. Don't be afraid to google, and reach out to someone if you're stuck on anything for more than 20 minutes! Check out the matplotlib documentation and see what other ways you can customize your scatterplot."]}]}